#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProductNotes
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ManufacturingStore_v2")]
	public partial class ManufacturingDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertSerialNumber(SerialNumber instance);
    partial void UpdateSerialNumber(SerialNumber instance);
    partial void DeleteSerialNumber(SerialNumber instance);
    partial void InsertProductionSite(ProductionSite instance);
    partial void UpdateProductionSite(ProductionSite instance);
    partial void DeleteProductionSite(ProductionSite instance);
    partial void InsertEuiList(EuiList instance);
    partial void UpdateEuiList(EuiList instance);
    partial void DeleteEuiList(EuiList instance);
    partial void InsertTester(Tester instance);
    partial void UpdateTester(Tester instance);
    partial void DeleteTester(Tester instance);
    partial void InsertProductNote(ProductNote instance);
    partial void UpdateProductNote(ProductNote instance);
    partial void DeleteProductNote(ProductNote instance);
    #endregion
		
		public ManufacturingDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ManufacturingStore_v2ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ManufacturingDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManufacturingDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManufacturingDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManufacturingDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<SerialNumber> SerialNumbers
		{
			get
			{
				return this.GetTable<SerialNumber>();
			}
		}
		
		public System.Data.Linq.Table<ProductionSite> ProductionSites
		{
			get
			{
				return this.GetTable<ProductionSite>();
			}
		}
		
		public System.Data.Linq.Table<EuiList> EuiLists
		{
			get
			{
				return this.GetTable<EuiList>();
			}
		}
		
		public System.Data.Linq.Table<Tester> Testers
		{
			get
			{
				return this.GetTable<Tester>();
			}
		}
		
		public System.Data.Linq.Table<ProductNote> ProductNotes
		{
			get
			{
				return this.GetTable<ProductNote>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ModelString;
		
		private string _Description;
		
		private System.Nullable<bool> _Released;
		
		private int _BoardId;
		
		private System.DateTime _CreateDate;
		
		private string _SerialNumberCode;
		
		private string _ZigbeeModelString;
		
		private int _ExtensionId;
		
		private string _SKU;
		
		private bool _CurrentTest;
		
		private System.Nullable<int> _ModelEncodingNumber;
		
		private string _ZplFile;
		
		private bool _EnableReadProtectOnDevice;
		
		private EntitySet<SerialNumber> _SerialNumbers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModelStringChanging(string value);
    partial void OnModelStringChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnReleasedChanging(System.Nullable<bool> value);
    partial void OnReleasedChanged();
    partial void OnBoardIdChanging(int value);
    partial void OnBoardIdChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnSerialNumberCodeChanging(string value);
    partial void OnSerialNumberCodeChanged();
    partial void OnZigbeeModelStringChanging(string value);
    partial void OnZigbeeModelStringChanged();
    partial void OnExtensionIdChanging(int value);
    partial void OnExtensionIdChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnCurrentTestChanging(bool value);
    partial void OnCurrentTestChanged();
    partial void OnModelEncodingNumberChanging(System.Nullable<int> value);
    partial void OnModelEncodingNumberChanged();
    partial void OnZplFileChanging(string value);
    partial void OnZplFileChanged();
    partial void OnEnableReadProtectOnDeviceChanging(bool value);
    partial void OnEnableReadProtectOnDeviceChanged();
    #endregion
		
		public Product()
		{
			this._SerialNumbers = new EntitySet<SerialNumber>(new Action<SerialNumber>(this.attach_SerialNumbers), new Action<SerialNumber>(this.detach_SerialNumbers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelString", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ModelString
		{
			get
			{
				return this._ModelString;
			}
			set
			{
				if ((this._ModelString != value))
				{
					this.OnModelStringChanging(value);
					this.SendPropertyChanging();
					this._ModelString = value;
					this.SendPropertyChanged("ModelString");
					this.OnModelStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Released", DbType="Bit")]
		public System.Nullable<bool> Released
		{
			get
			{
				return this._Released;
			}
			set
			{
				if ((this._Released != value))
				{
					this.OnReleasedChanging(value);
					this.SendPropertyChanging();
					this._Released = value;
					this.SendPropertyChanged("Released");
					this.OnReleasedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardId", DbType="Int NOT NULL")]
		public int BoardId
		{
			get
			{
				return this._BoardId;
			}
			set
			{
				if ((this._BoardId != value))
				{
					this.OnBoardIdChanging(value);
					this.SendPropertyChanging();
					this._BoardId = value;
					this.SendPropertyChanged("BoardId");
					this.OnBoardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumberCode", DbType="NVarChar(8) NOT NULL", CanBeNull=false)]
		public string SerialNumberCode
		{
			get
			{
				return this._SerialNumberCode;
			}
			set
			{
				if ((this._SerialNumberCode != value))
				{
					this.OnSerialNumberCodeChanging(value);
					this.SendPropertyChanging();
					this._SerialNumberCode = value;
					this.SendPropertyChanged("SerialNumberCode");
					this.OnSerialNumberCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZigbeeModelString", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ZigbeeModelString
		{
			get
			{
				return this._ZigbeeModelString;
			}
			set
			{
				if ((this._ZigbeeModelString != value))
				{
					this.OnZigbeeModelStringChanging(value);
					this.SendPropertyChanging();
					this._ZigbeeModelString = value;
					this.SendPropertyChanged("ZigbeeModelString");
					this.OnZigbeeModelStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtensionId", DbType="Int NOT NULL")]
		public int ExtensionId
		{
			get
			{
				return this._ExtensionId;
			}
			set
			{
				if ((this._ExtensionId != value))
				{
					this.OnExtensionIdChanging(value);
					this.SendPropertyChanging();
					this._ExtensionId = value;
					this.SendPropertyChanged("ExtensionId");
					this.OnExtensionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SKU", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentTest", DbType="Bit NOT NULL")]
		public bool CurrentTest
		{
			get
			{
				return this._CurrentTest;
			}
			set
			{
				if ((this._CurrentTest != value))
				{
					this.OnCurrentTestChanging(value);
					this.SendPropertyChanging();
					this._CurrentTest = value;
					this.SendPropertyChanged("CurrentTest");
					this.OnCurrentTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelEncodingNumber", DbType="Int")]
		public System.Nullable<int> ModelEncodingNumber
		{
			get
			{
				return this._ModelEncodingNumber;
			}
			set
			{
				if ((this._ModelEncodingNumber != value))
				{
					this.OnModelEncodingNumberChanging(value);
					this.SendPropertyChanging();
					this._ModelEncodingNumber = value;
					this.SendPropertyChanged("ModelEncodingNumber");
					this.OnModelEncodingNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZplFile", DbType="NVarChar(255)")]
		public string ZplFile
		{
			get
			{
				return this._ZplFile;
			}
			set
			{
				if ((this._ZplFile != value))
				{
					this.OnZplFileChanging(value);
					this.SendPropertyChanging();
					this._ZplFile = value;
					this.SendPropertyChanged("ZplFile");
					this.OnZplFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnableReadProtectOnDevice", DbType="Bit NOT NULL")]
		public bool EnableReadProtectOnDevice
		{
			get
			{
				return this._EnableReadProtectOnDevice;
			}
			set
			{
				if ((this._EnableReadProtectOnDevice != value))
				{
					this.OnEnableReadProtectOnDeviceChanging(value);
					this.SendPropertyChanging();
					this._EnableReadProtectOnDevice = value;
					this.SendPropertyChanged("EnableReadProtectOnDevice");
					this.OnEnableReadProtectOnDeviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SerialNumber", Storage="_SerialNumbers", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<SerialNumber> SerialNumbers
		{
			get
			{
				return this._SerialNumbers;
			}
			set
			{
				this._SerialNumbers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SerialNumbers(SerialNumber entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_SerialNumbers(SerialNumber entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SerialNumber")]
	public partial class SerialNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SerialNumberId;
		
		private int _SerialNumber1;
		
		private int _ProductId;
		
		private int _EuiId;
		
		private System.DateTime _CreateDate;
		
		private int _TesterId;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<EuiList> _EuiList;
		
		private EntityRef<Tester> _Tester;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSerialNumberIdChanging(int value);
    partial void OnSerialNumberIdChanged();
    partial void OnContentChanging(int value);
    partial void OnContentChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnEuiIdChanging(int value);
    partial void OnEuiIdChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnTesterIdChanging(int value);
    partial void OnTesterIdChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    #endregion
		
		public SerialNumber()
		{
			this._Product = default(EntityRef<Product>);
			this._EuiList = default(EntityRef<EuiList>);
			this._Tester = default(EntityRef<Tester>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumberId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SerialNumberId
		{
			get
			{
				return this._SerialNumberId;
			}
			set
			{
				if ((this._SerialNumberId != value))
				{
					this.OnSerialNumberIdChanging(value);
					this.SendPropertyChanging();
					this._SerialNumberId = value;
					this.SendPropertyChanged("SerialNumberId");
					this.OnSerialNumberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SerialNumber", Storage="_SerialNumber1", DbType="Int NOT NULL")]
		public int Content
		{
			get
			{
				return this._SerialNumber1;
			}
			set
			{
				if ((this._SerialNumber1 != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber1 = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EuiId", DbType="Int NOT NULL")]
		public int EuiId
		{
			get
			{
				return this._EuiId;
			}
			set
			{
				if ((this._EuiId != value))
				{
					if (this._EuiList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEuiIdChanging(value);
					this.SendPropertyChanging();
					this._EuiId = value;
					this.SendPropertyChanged("EuiId");
					this.OnEuiIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TesterId", DbType="Int NOT NULL")]
		public int TesterId
		{
			get
			{
				return this._TesterId;
			}
			set
			{
				if ((this._TesterId != value))
				{
					if (this._Tester.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTesterIdChanging(value);
					this.SendPropertyChanging();
					this._TesterId = value;
					this.SendPropertyChanged("TesterId");
					this.OnTesterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SerialNumber", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.SerialNumbers.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.SerialNumbers.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EuiList_SerialNumber", Storage="_EuiList", ThisKey="EuiId", OtherKey="Id", IsForeignKey=true)]
		public EuiList EuiList
		{
			get
			{
				return this._EuiList.Entity;
			}
			set
			{
				EuiList previousValue = this._EuiList.Entity;
				if (((previousValue != value) 
							|| (this._EuiList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EuiList.Entity = null;
						previousValue.SerialNumbers.Remove(this);
					}
					this._EuiList.Entity = value;
					if ((value != null))
					{
						value.SerialNumbers.Add(this);
						this._EuiId = value.Id;
					}
					else
					{
						this._EuiId = default(int);
					}
					this.SendPropertyChanged("EuiList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tester_SerialNumber", Storage="_Tester", ThisKey="TesterId", OtherKey="Id", IsForeignKey=true)]
		public Tester Tester
		{
			get
			{
				return this._Tester.Entity;
			}
			set
			{
				Tester previousValue = this._Tester.Entity;
				if (((previousValue != value) 
							|| (this._Tester.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tester.Entity = null;
						previousValue.SerialNumbers.Remove(this);
					}
					this._Tester.Entity = value;
					if ((value != null))
					{
						value.SerialNumbers.Add(this);
						this._TesterId = value.Id;
					}
					else
					{
						this._TesterId = default(int);
					}
					this.SendPropertyChanged("Tester");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductionSite")]
	public partial class ProductionSite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _LoadRangeTest;
		
		private bool _RunIct;
		
		private bool _RunRangeTest;
		
		private bool _LoadApplication;
		
		private bool _ForceChannel;
		
		private bool _Erase;
		
		private bool _EnableFirmwareChange;
		
		private EntitySet<EuiList> _EuiLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLoadRangeTestChanging(bool value);
    partial void OnLoadRangeTestChanged();
    partial void OnRunIctChanging(bool value);
    partial void OnRunIctChanged();
    partial void OnRunRangeTestChanging(bool value);
    partial void OnRunRangeTestChanged();
    partial void OnLoadApplicationChanging(bool value);
    partial void OnLoadApplicationChanged();
    partial void OnForceChannelChanging(bool value);
    partial void OnForceChannelChanged();
    partial void OnEraseChanging(bool value);
    partial void OnEraseChanged();
    partial void OnEnableFirmwareChangeChanging(bool value);
    partial void OnEnableFirmwareChangeChanged();
    #endregion
		
		public ProductionSite()
		{
			this._EuiLists = new EntitySet<EuiList>(new Action<EuiList>(this.attach_EuiLists), new Action<EuiList>(this.detach_EuiLists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadRangeTest", DbType="Bit NOT NULL")]
		public bool LoadRangeTest
		{
			get
			{
				return this._LoadRangeTest;
			}
			set
			{
				if ((this._LoadRangeTest != value))
				{
					this.OnLoadRangeTestChanging(value);
					this.SendPropertyChanging();
					this._LoadRangeTest = value;
					this.SendPropertyChanged("LoadRangeTest");
					this.OnLoadRangeTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunIct", DbType="Bit NOT NULL")]
		public bool RunIct
		{
			get
			{
				return this._RunIct;
			}
			set
			{
				if ((this._RunIct != value))
				{
					this.OnRunIctChanging(value);
					this.SendPropertyChanging();
					this._RunIct = value;
					this.SendPropertyChanged("RunIct");
					this.OnRunIctChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunRangeTest", DbType="Bit NOT NULL")]
		public bool RunRangeTest
		{
			get
			{
				return this._RunRangeTest;
			}
			set
			{
				if ((this._RunRangeTest != value))
				{
					this.OnRunRangeTestChanging(value);
					this.SendPropertyChanging();
					this._RunRangeTest = value;
					this.SendPropertyChanged("RunRangeTest");
					this.OnRunRangeTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadApplication", DbType="Bit NOT NULL")]
		public bool LoadApplication
		{
			get
			{
				return this._LoadApplication;
			}
			set
			{
				if ((this._LoadApplication != value))
				{
					this.OnLoadApplicationChanging(value);
					this.SendPropertyChanging();
					this._LoadApplication = value;
					this.SendPropertyChanged("LoadApplication");
					this.OnLoadApplicationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForceChannel", DbType="Bit NOT NULL")]
		public bool ForceChannel
		{
			get
			{
				return this._ForceChannel;
			}
			set
			{
				if ((this._ForceChannel != value))
				{
					this.OnForceChannelChanging(value);
					this.SendPropertyChanging();
					this._ForceChannel = value;
					this.SendPropertyChanged("ForceChannel");
					this.OnForceChannelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Erase", DbType="Bit NOT NULL")]
		public bool Erase
		{
			get
			{
				return this._Erase;
			}
			set
			{
				if ((this._Erase != value))
				{
					this.OnEraseChanging(value);
					this.SendPropertyChanging();
					this._Erase = value;
					this.SendPropertyChanged("Erase");
					this.OnEraseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnableFirmwareChange", DbType="Bit NOT NULL")]
		public bool EnableFirmwareChange
		{
			get
			{
				return this._EnableFirmwareChange;
			}
			set
			{
				if ((this._EnableFirmwareChange != value))
				{
					this.OnEnableFirmwareChangeChanging(value);
					this.SendPropertyChanging();
					this._EnableFirmwareChange = value;
					this.SendPropertyChanged("EnableFirmwareChange");
					this.OnEnableFirmwareChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductionSite_EuiList", Storage="_EuiLists", ThisKey="Id", OtherKey="ProductionSiteId")]
		public EntitySet<EuiList> EuiLists
		{
			get
			{
				return this._EuiLists;
			}
			set
			{
				this._EuiLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EuiLists(EuiList entity)
		{
			this.SendPropertyChanging();
			entity.ProductionSite = this;
		}
		
		private void detach_EuiLists(EuiList entity)
		{
			this.SendPropertyChanging();
			entity.ProductionSite = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EuiList")]
	public partial class EuiList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _EUI;
		
		private int _ProductionSiteId;
		
		private string _VendorEui;
		
		private EntitySet<SerialNumber> _SerialNumbers;
		
		private EntityRef<ProductionSite> _ProductionSite;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEUIChanging(string value);
    partial void OnEUIChanged();
    partial void OnProductionSiteIdChanging(int value);
    partial void OnProductionSiteIdChanged();
    partial void OnVendorEuiChanging(string value);
    partial void OnVendorEuiChanged();
    #endregion
		
		public EuiList()
		{
			this._SerialNumbers = new EntitySet<SerialNumber>(new Action<SerialNumber>(this.attach_SerialNumbers), new Action<SerialNumber>(this.detach_SerialNumbers));
			this._ProductionSite = default(EntityRef<ProductionSite>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EUI", DbType="NChar(16) NOT NULL", CanBeNull=false)]
		public string EUI
		{
			get
			{
				return this._EUI;
			}
			set
			{
				if ((this._EUI != value))
				{
					this.OnEUIChanging(value);
					this.SendPropertyChanging();
					this._EUI = value;
					this.SendPropertyChanged("EUI");
					this.OnEUIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionSiteId", DbType="Int NOT NULL")]
		public int ProductionSiteId
		{
			get
			{
				return this._ProductionSiteId;
			}
			set
			{
				if ((this._ProductionSiteId != value))
				{
					if (this._ProductionSite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductionSiteIdChanging(value);
					this.SendPropertyChanging();
					this._ProductionSiteId = value;
					this.SendPropertyChanged("ProductionSiteId");
					this.OnProductionSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorEui", DbType="NChar(16)")]
		public string VendorEui
		{
			get
			{
				return this._VendorEui;
			}
			set
			{
				if ((this._VendorEui != value))
				{
					this.OnVendorEuiChanging(value);
					this.SendPropertyChanging();
					this._VendorEui = value;
					this.SendPropertyChanged("VendorEui");
					this.OnVendorEuiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EuiList_SerialNumber", Storage="_SerialNumbers", ThisKey="Id", OtherKey="EuiId")]
		public EntitySet<SerialNumber> SerialNumbers
		{
			get
			{
				return this._SerialNumbers;
			}
			set
			{
				this._SerialNumbers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductionSite_EuiList", Storage="_ProductionSite", ThisKey="ProductionSiteId", OtherKey="Id", IsForeignKey=true)]
		public ProductionSite ProductionSite
		{
			get
			{
				return this._ProductionSite.Entity;
			}
			set
			{
				ProductionSite previousValue = this._ProductionSite.Entity;
				if (((previousValue != value) 
							|| (this._ProductionSite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductionSite.Entity = null;
						previousValue.EuiLists.Remove(this);
					}
					this._ProductionSite.Entity = value;
					if ((value != null))
					{
						value.EuiLists.Add(this);
						this._ProductionSiteId = value.Id;
					}
					else
					{
						this._ProductionSiteId = default(int);
					}
					this.SendPropertyChanged("ProductionSite");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SerialNumbers(SerialNumber entity)
		{
			this.SendPropertyChanging();
			entity.EuiList = this;
		}
		
		private void detach_SerialNumbers(SerialNumber entity)
		{
			this.SendPropertyChanging();
			entity.EuiList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tester")]
	public partial class Tester : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private System.Nullable<int> _Pin;
		
		private System.DateTime _CreateDate;
		
		private int _Id;
		
		private bool _Active;
		
		private EntitySet<SerialNumber> _SerialNumbers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPinChanging(System.Nullable<int> value);
    partial void OnPinChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Tester()
		{
			this._SerialNumbers = new EntitySet<SerialNumber>(new Action<SerialNumber>(this.attach_SerialNumbers), new Action<SerialNumber>(this.detach_SerialNumbers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pin", DbType="Int")]
		public System.Nullable<int> Pin
		{
			get
			{
				return this._Pin;
			}
			set
			{
				if ((this._Pin != value))
				{
					this.OnPinChanging(value);
					this.SendPropertyChanging();
					this._Pin = value;
					this.SendPropertyChanged("Pin");
					this.OnPinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tester_SerialNumber", Storage="_SerialNumbers", ThisKey="Id", OtherKey="TesterId")]
		public EntitySet<SerialNumber> SerialNumbers
		{
			get
			{
				return this._SerialNumbers;
			}
			set
			{
				this._SerialNumbers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SerialNumbers(SerialNumber entity)
		{
			this.SendPropertyChanging();
			entity.Tester = this;
		}
		
		private void detach_SerialNumbers(SerialNumber entity)
		{
			this.SendPropertyChanging();
			entity.Tester = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductNotes")]
	public partial class ProductNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Note;
		
		private System.DateTime _EffectiveDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnEffectiveDateChanging(System.DateTime value);
    partial void OnEffectiveDateChanged();
    #endregion
		
		public ProductNote()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="DateTime NOT NULL")]
		public System.DateTime EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged("EffectiveDate");
					this.OnEffectiveDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
